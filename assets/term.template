{{template "header.template"}}
<section id="term">
    <h3>Term</h3>
    <p>Did you know that Windows can also be managed using <a href="https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse">SSH</a> ?</p>
    <form action="" method="post" @submit.prevent="createSSH" x-init="memorySSH($el)">
        <fieldset role="group">
            <input name="host" type="text" placeholder="主机" value="127.0.0.1">
            <input name="port" type="text" placeholder="端口" value="22" >
            <input name="user" type="text" placeholder="用户名" value="root" >
            <input name="pwd" type="password" placeholder="密码" >
            <button type='submit'>Connect</button>
            <button type='button' @click.prevent="localStorage.clear();$el.remove();location.reload()" x-show="localStorage.host">Clear</button>
        </fieldset>
    </form>
    <div id="terminal"></div>
</section>


<link rel="stylesheet" href="/assets/css/xterm.css" />
<script src="/assets/js/xterm.js"></script>
<script src="/assets/js/xterm-addon-attach.js"></script>
<script src="/assets/js/xterm-addon-fit.js"></script>
<script src="/assets/js/xterm-addon-web-links.js"></script>
<script>
    document.addEventListener('alpine:init', () => {
            Alpine.data('panel', () => ({
                init() {
                     debounce=function (f, timeout){
                        let t;
                        return (...args) => {
                            clearTimeout(t);
                            t = setTimeout(() => { f.apply(this, args); }, timeout);
                        };
                    }
                },
                memorySSH(el){
                    if (localStorage.host){
                        el.host.value=localStorage.host;
                        el.port.value=localStorage.port;
                        el.user.value=localStorage.user;
                        el.pwd.value=localStorage.pwd;
                        fetch(el.action,{
                            method: 'POST',
                            body: new FormData(el)
                        })
                            .then(res=>res.json())
                            .then(data=>{
                                this.linkSSH(data.id)
                            })
                    }
                },
                linkSSH(id){
                    let attachAddon = new AttachAddon.AttachAddon(
                        new WebSocket(((window.location.protocol === "https:") ? "wss://" : "ws://") + window.location.host + `/admin/term/${id}/data`), { bidirectional: true });
                    let fitAddon = new FitAddon.FitAddon();
                    let webLinksAddon = new WebLinksAddon.WebLinksAddon();
                    let term = new Terminal({
                        'fontFamily': 'monospace, "Lucida Console", "Courier New"',
                        'fontSize': 14,
                        'rows': 40,
                        'cols': 100,
                    });
                    term.loadAddon(webLinksAddon);
                    term.loadAddon(fitAddon);
                    term.loadAddon(attachAddon);
                    term.open(document.getElementById('terminal'));
                    term.onResize(({cols, rows}) => {
                        console.log(`Resize to: ${cols}, ${rows}`);
                        fetch(`./term/resize?id=${id}&cols=${cols}&rows=${rows}`)
                            .then(resp => resp.json())
                            .then(term => console.log('Okay', term));
                    })
                    fitAddon.fit();
                    term.focus();
                    window.addEventListener('resize', debounce(() => {
                        fitAddon.fit();
                        term.focus();
                    }, 250))
                },
                async createSSH(e) {
                    const res = await fetch(e.target.action, {method: 'POST', body: new FormData(e.target)})
                    if (res.status === 400) {
                        alert(await res.text())
                    }
                    const data = await res.json()
                    if (data === null) return
                    localStorage.host = e.target.host.value;
                    localStorage.port = e.target.port.value;
                    localStorage.user = e.target.user.value;
                    localStorage.pwd = e.target.pwd.value;
                    this.linkSSH(data.id)
                }
            }))
        }
    )
</script>