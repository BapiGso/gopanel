{{template "header.template"}}
<h3 class="text-2xl font-semibold text-gray-900 dark:text-white mb-6">
    <i class="ri-hub-line w-6 h-6 inline mr-2"></i>
    Headscale Manage
</h3>

<div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-4 mb-6">
    <div class="flex items-center mb-2">
        <i class="ri-error-warning-line w-5 h-5 text-yellow-600 dark:text-yellow-400 mr-2"></i>
        <span class="text-sm font-medium text-yellow-800 dark:text-yellow-200">Experimental Feature</span>
    </div>
    <p class="text-sm text-yellow-700 dark:text-yellow-300 ml-7">
        An open source, self-hosted implementation of the Tailscale control server
    </p>
</div>

<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 p-6" x-data="headscalePanel">
    <!-- Status Display -->
    <div class="mb-6 p-4 rounded-lg" :class="status === 'running' ? 'bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800' : 'bg-gray-50 dark:bg-gray-900/20 border border-gray-200 dark:border-gray-800'">
        <div class="flex items-center justify-between">
            <div class="flex items-center">
                <i class="ri-information-line w-5 h-5 mr-2" :class="status === 'running' ? 'text-green-600 dark:text-green-400' : 'text-gray-600 dark:text-gray-400'"></i>
                <span class="text-sm font-medium" :class="status === 'running' ? 'text-green-800 dark:text-green-200' : 'text-gray-800 dark:text-gray-200'">
                    Status: <span x-text="status === 'running' ? 'Running' : 'Stopped'"></span>
                </span>
            </div>
            <div class="flex gap-2">
                <button @click="checkStatus" type="button" class="px-3 py-1 text-sm bg-blue-600 hover:bg-blue-700 text-white rounded transition-colors">
                    <i class="ri-refresh-line w-4 h-4"></i>
                </button>
                <button x-show="status === 'running'" @click="stopHeadscale" type="button" class="px-3 py-1 text-sm bg-red-600 hover:bg-red-700 text-white rounded transition-colors">
                    <i class="ri-stop-circle-line w-4 h-4 mr-1"></i> Stop
                </button>
            </div>
        </div>
    </div>

    <h4 class="text-lg font-medium text-gray-900 dark:text-white mb-6 flex items-center">
        <i class="ri-settings-3-line w-5 h-5 mr-2"></i>
        Headscale Configuration
    </h4>

    <form @submit.prevent="saveConfig">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Server URL
                </label>
                <input name="server_url" type="url" value="https://myheadscale.example.com:443" required
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent">
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Public URL for your Headscale server</p>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Listen Address
                </label>
                <input name="listen_addr" type="text" value="0.0.0.0:8080" required
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent">
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Address and port to listen on</p>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Metrics Listen Address
                </label>
                <input name="metrics_listen_addr" type="text" value="127.0.0.1:9090" required
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent">
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Address for metrics endpoint</p>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    gRPC Listen Address
                </label>
                <input name="grpc_listen_addr" type="text" value="127.0.0.1:50443" required
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent">
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Address for gRPC API</p>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Noise Private Key Path
                </label>
                <input name="private_key_path" type="text" value="/var/lib/headscale/noise_private.key" required
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm">
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Path to noise private key file</p>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    Base Domain
                </label>
                <input name="base_domain" type="text" value="example.com" required
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent">
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">Base domain for MagicDNS</p>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    IPv4 Prefix
                </label>
                <input name="ipv4_prefix" type="text" value="100.64.0.0/10" required
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm">
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">IPv4 address range</p>
            </div>

            <div>
                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                    IPv6 Prefix
                </label>
                <input name="ipv6_prefix" type="text" value="fd7a:115c:a1e0::/48" required
                       class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm">
                <p class="mt-1 text-xs text-gray-500 dark:text-gray-400">IPv6 address range</p>
            </div>
        </div>

        <div class="flex justify-end mt-6 gap-3">
            <button type="submit"
                    class="px-6 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors flex items-center">
                <i class="ri-save-line w-4 h-4 mr-2"></i>
                Save Configuration
            </button>
            <button x-show="status !== 'running'" @click="startHeadscale" type="button"
                    class="px-6 py-2 bg-green-600 hover:bg-green-700 text-white rounded-lg transition-colors flex items-center">
                <i class="ri-play-circle-line w-4 h-4 mr-2"></i>
                Start Headscale
            </button>
        </div>
    </form>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('headscalePanel', () => ({
            status: 'stopped',
            
            async init() {
                await this.checkStatus();
            },
            
            async checkStatus() {
                try {
                    const response = await fetch('/admin/headscale/status');
                    const result = await response.json();
                    this.status = result.status || 'stopped';
                } catch (error) {
                    console.error('Failed to check status:', error);
                    this.status = 'stopped';
                }
            },
            
            async saveConfig(e) {
                try {
                    const formData = new FormData(e.target);
                    const response = await fetch('/admin/headscale/config', {
                        method: 'POST',
                        body: formData
                    });
                    const result = await response.json();
                    if (result.success) {
                        alert('Configuration saved successfully');
                    } else {
                        alert('Failed to save configuration: ' + (result.message || 'Unknown error'));
                    }
                } catch (error) {
                    alert('Failed to save configuration: ' + error.message);
                }
            },
            
            async startHeadscale() {
                try {
                    const response = await fetch('/admin/headscale/start', {
                        method: 'POST'
                    });
                    const result = await response.json();
                    if (result.success) {
                        alert('Headscale started successfully');
                        this.status = 'running';
                    } else {
                        alert('Failed to start Headscale: ' + (result.message || 'Unknown error'));
                    }
                } catch (error) {
                    alert('Failed to start Headscale: ' + error.message);
                }
            },
            
            async stopHeadscale() {
                if (!confirm('Are you sure you want to stop Headscale?')) return;
                
                try {
                    const response = await fetch('/admin/headscale/stop', {
                        method: 'POST'
                    });
                    const result = await response.json();
                    if (result.success) {
                        alert('Headscale stopped successfully');
                        this.status = 'stopped';
                    } else {
                        alert('Failed to stop Headscale: ' + (result.message || 'Unknown error'));
                    }
                } catch (error) {
                    alert('Failed to stop Headscale: ' + error.message);
                }
            }
        }))
    })
</script>
{{template "footer.template"}}