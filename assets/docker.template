{{template "header.template"}}
    <h3 class="text-2xl font-semibold text-gray-900 dark:text-white mb-6">Docker Manage</h3>
    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
        <p class="text-blue-800 dark:text-blue-200 mb-2">1. This function calls the docker API installed on the system.</p>
        <p class="text-blue-800 dark:text-blue-200">2. For more complex management, use <a href="https://www.docker.com/products/docker-desktop/" class="underline hover:text-blue-600 dark:hover:text-blue-300">docker desktop</a></p>
    </div>
    <div class="mb-6">
        <button x-show="false" @click="dockerRunModal=true"
                class="px-4 py-2 bg-primary hover:bg-purple-700 text-white rounded-button">
            Docker Run
        </button>
    </div>
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden mb-6">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h4 class="text-lg font-medium text-gray-900 dark:text-white flex items-center">
                <i class="ri-stack-line w-5 h-5 mr-2"></i>
                Container List
            </h4>
        </div>
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Image</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Ports</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Created</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                <template x-for="d in data?.containers">
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                        <td class="px-6 py-4 text-sm font-medium text-gray-900 dark:text-white" x-text="d.Names"></td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300">
                            <a :href="d.Image" class="text-blue-600 dark:text-blue-400 hover:underline" x-text="d.Image"></a>
                        </td>
                        <td class="px-6 py-4 text-sm">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full"
                                  :class="d.State === 'running' ? 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200' :
                                          d.State === 'paused' ? 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200' :
                                          'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200'"
                                  x-text="d.State">
                            </span>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300">
                            <template x-for="port in d.Ports">
                                <div>
                                    <a class="text-blue-600 dark:text-blue-400 hover:underline"
                                       title="Click to visit, but not necessarily an http service"
                                       :href="`http://${port.IP}:${port.PublicPort}`"
                                       x-text="`${port.PublicPort}:${port.PrivatePort}`"></a>
                                </div>
                            </template>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300" x-text="timeAgo(d.Created)"></td>
                        <td class="px-6 py-4 text-sm space-x-2">
                            <button x-show="d.State !== 'running'" @click="Action('unpause', d.Id)"
                                    class="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300" title="Start">
                                <i class="ri-play-line w-4 h-4"></i>
                            </button>
                            <button x-show="d.State !== 'paused'" @click="Action('pause', d.Id)"
                                    class="text-yellow-600 hover:text-yellow-800 dark:text-yellow-400 dark:hover:text-yellow-300" title="Pause">
                                <i class="ri-pause-line w-4 h-4"></i>
                            </button>
                            <button x-show="d.State !== 'exited'" @click="Action('stop', d.Id)"
                                    class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300" title="Stop">
                                <i class="ri-stop-line w-4 h-4"></i>
                            </button>
                            <button @click="Action('restart', d.Id)"
                                    class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300" title="Restart">
                                <i class="ri-restart-line w-4 h-4"></i>
                            </button>
                            <button @click="confirm('sure to delete?') && Action('remove', d.Id)"
                                    class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300" title="Delete">
                                <i class="ri-delete-bin-line w-4 h-4"></i>
                            </button>
                        </td>
                    </tr>
                </template>
                </tbody>
            </table>
        </div>
    </div>
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
            <h4 class="text-lg font-medium text-gray-900 dark:text-white flex items-center">
                <i class="ri-image-line w-5 h-5 mr-2"></i>
                Image List
            </h4>
        </div>
        <div class="overflow-x-auto">
            <table class="w-full">
                <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Tag</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Created</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Size</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                </tr>
                </thead>
                <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                <template x-for="d in data?.images">
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                        <td class="px-6 py-4 text-sm font-medium text-gray-900 dark:text-white" x-text="d.RepoTags[0].split(':')[0]"></td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300">
                            <span class="inline-flex px-2 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded"
                                  x-text="d.RepoTags[0].split(':')[1]"></span>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300" x-text="new Date(d.Created * 1000).toLocaleDateString()"></td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300" x-text="formatBytes(d.Size)"></td>
                        <td class="px-6 py-4 text-sm">
                            <button @click="confirm('sure to delete?') && Action('ImageRemove', d.Id)"
                                    class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300" title="Delete">
                                <i class="ri-delete-bin-line w-4 h-4"></i>
                            </button>
                        </td>
                    </tr>
                </template>
                </tbody>
            </table>
        </div>
    </div>
{{template "footer.template"}}

<div x-show="dockerRunModal" class="fixed inset-0 z-50 overflow-y-auto" x-cloak>
    <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75" @click="dockerRunModal=false"></div>
        <div class="inline-block w-full max-w-2xl p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white dark:bg-gray-800 shadow-xl rounded-lg">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">Type Your Docker Run Command</h3>
                <button @click="dockerRunModal=false" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                    <i class="ri-close-line w-6 h-6"></i>
                </button>
            </div>
            <textarea rows="15"
                      class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent"
                      placeholder="docker run -d --name my-container nginx:latest"
                      aria-label="Docker Run"></textarea>
            <div class="flex justify-end mt-4 space-x-3">
                <button @click="dockerRunModal=false"
                        class="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-600 hover:bg-gray-200 dark:hover:bg-gray-500 rounded-button">
                    Cancel
                </button>
                <button class="px-4 py-2 bg-primary hover:bg-purple-700 text-white rounded-button">
                    Run
                </button>
            </div>
        </div>
    </div>
</div>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('panel', () => ({
            init(){
                const eventSource = new EventSource('/admin/docker?type=info');
                eventSource.onmessage=(event) => {
                    this.data=JSON.parse(event.data);
                };
                eventSource.onerror=(event) => {
                    console.log(event)
                }
            },
            data:null,
            dockerRunModal:false,
            async Action(action, id) {
                let response = await fetch(`/admin/docker?type=${action}&id=${id}`, {method: 'PUT'});
                if (response.ok) {
                    alert(`${action} successful`);
                } else {
                    alert(await response.text());
                }
            },
            formatBytes(bytes, decimals = 2) {
                if (bytes === '0') return '0';
                const k = 1024;
                const dm = decimals < 0 ? 0 : decimals;
                const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
            },
            timeAgo(timestamp){
            const now = new Date();
            const past = new Date(timestamp * 1000);
            const diffInSeconds = Math.floor((now - past) / 1000);

            if (diffInSeconds < 60) {
                return `${diffInSeconds} seconds ago`;
            } else if (diffInSeconds < 3600) {
                const minutes = Math.floor(diffInSeconds / 60);
                return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
            } else if (diffInSeconds < 86400) {
                const hours = Math.floor(diffInSeconds / 3600);
                return `${hours} hour${hours > 1 ? 's' : ''} ago`;
            } else {
                const days = Math.floor(diffInSeconds / 86400);
                return `${days} day${days > 1 ? 's' : ''} ago`;
            }
        }

    }))
    })
</script>