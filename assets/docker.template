{{template "header.template"}}
<h3 class="text-2xl font-semibold text-gray-900 dark:text-white mb-6">
    <i class="ri-stack-line w-6 h-6 inline mr-2"></i>
    Docker Manage
</h3>

<div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-4 mb-6">
    <div class="flex items-center mb-2">
        <i class="ri-information-line w-5 h-5 text-blue-600 dark:text-blue-400 mr-2"></i>
        <span class="text-sm font-medium text-blue-800 dark:text-blue-200">Docker Management</span>
    </div>
    <ul class="text-sm text-blue-700 dark:text-blue-300 space-y-1 ml-7">
        <li>• This function calls the Docker API installed on the system</li>
        <li>• For more complex management, use <a href="https://www.docker.com/products/docker-desktop/" class="underline hover:text-blue-600 dark:hover:text-blue-400">Docker Desktop</a></li>
    </ul>
</div>

<div class="mb-6" x-show="false">
    <button @click="dockerRunModal=true"
            class="px-4 py-2 bg-primary hover:bg-purple-700 text-white rounded-lg transition-colors flex items-center">
        <i class="ri-add-line w-4 h-4 mr-2"></i>
        Docker Run
    </button>
</div>

<!-- Container List -->
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden mb-6">
    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h4 class="text-lg font-medium text-gray-900 dark:text-white flex items-center">
            <i class="ri-server-line w-5 h-5 mr-2"></i>
            Container List
        </h4>
    </div>
    
    <div class="overflow-x-auto">
        <table class="w-full">
            <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Name</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Image</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Status</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Ports</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Created</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                <template x-for="d in data?.containers" :key="d.Id">
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                        <td class="px-6 py-4 text-sm font-medium text-gray-900 dark:text-white" x-text="d.Names"></td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300">
                            <span class="font-mono text-xs" x-text="d.Image"></span>
                        </td>
                        <td class="px-6 py-4 text-sm">
                            <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full"
                                  :class="{
                                      'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200': d.State === 'running',
                                      'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200': d.State === 'paused',
                                      'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200': d.State === 'exited'
                                  }"
                                  x-text="d.State">
                            </span>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300">
                            <template x-for="(port, index) in (d.Ports ? d.Ports.filter(p => p.IP !== '::') : [])" :key="`${d.Id}-port-${index}`">
                                <div>
                                    <a class="text-blue-600 dark:text-blue-400 hover:underline text-xs"
                                       title="Click to visit (may not be HTTP service)"
                                       :href="`http://${port.IP === '0.0.0.0' ? 'localhost' : (port.IP || 'localhost')}:${port.PublicPort}`"
                                       target="_blank"
                                       x-text="`${port.PublicPort}→${port.PrivatePort}/${port.Type}`"></a>
                                </div>
                            </template>
                            <span x-show="!d.Ports || d.Ports.filter(p => p.IP !== '::').length === 0" class="text-gray-400 text-xs">No ports</span>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300" x-text="timeAgo(d.Created)"></td>
                        <td class="px-6 py-4 text-sm">
                            <div class="flex items-center space-x-2">
                                <button x-show="d.State !== 'running'" @click="Action('unpause', d.Id)"
                                        class="text-green-600 hover:text-green-800 dark:text-green-400 dark:hover:text-green-300 transition-colors"
                                        title="Start">
                                    <i class="ri-play-circle-line w-5 h-5"></i>
                                </button>
                                <button x-show="d.State === 'running'" @click="Action('pause', d.Id)"
                                        class="text-yellow-600 hover:text-yellow-800 dark:text-yellow-400 dark:hover:text-yellow-300 transition-colors"
                                        title="Pause">
                                    <i class="ri-pause-circle-line w-5 h-5"></i>
                                </button>
                                <button x-show="d.State !== 'exited'" @click="Action('stop', d.Id)"
                                        class="text-orange-600 hover:text-orange-800 dark:text-orange-400 dark:hover:text-orange-300 transition-colors"
                                        title="Stop">
                                    <i class="ri-stop-circle-line w-5 h-5"></i>
                                </button>
                                <button @click="Action('restart', d.Id)"
                                        class="text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
                                        title="Restart">
                                    <i class="ri-restart-line w-5 h-5"></i>
                                </button>
                                <button @click="confirm('Are you sure you want to delete this container?') && Action('remove', d.Id)"
                                        class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 transition-colors"
                                        title="Delete">
                                    <i class="ri-delete-bin-line w-5 h-5"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                </template>
            </tbody>
        </table>
        
        <div x-show="!data?.containers || data.containers.length === 0" class="px-6 py-8 text-center text-gray-500 dark:text-gray-400">
            <i class="ri-inbox-line w-12 h-12 mx-auto mb-3 text-gray-300 dark:text-gray-600"></i>
            <p class="text-sm">No containers found</p>
        </div>
    </div>
</div>

<!-- Image List -->
<div class="bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-100 dark:border-gray-700 overflow-hidden">
    <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <h4 class="text-lg font-medium text-gray-900 dark:text-white flex items-center">
            <i class="ri-image-line w-5 h-5 mr-2"></i>
            Image List
        </h4>
    </div>
    
    <div class="overflow-x-auto">
        <table class="w-full">
            <thead class="bg-gray-50 dark:bg-gray-700">
                <tr>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Repository</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Tag</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Created</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Size</th>
                    <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-200 dark:divide-gray-700">
                <template x-for="d in data?.images" :key="d.Id">
                    <tr class="hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                        <td class="px-6 py-4 text-sm font-medium text-gray-900 dark:text-white">
                            <span class="font-mono text-xs" x-text="d.RepoTags?.[0]?.split(':')[0] || 'none'"></span>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300">
                            <span class="inline-flex px-2 py-1 text-xs font-medium bg-gray-100 dark:bg-gray-700 text-gray-800 dark:text-gray-200 rounded"
                                  x-text="d.RepoTags?.[0]?.split(':')[1] || 'latest'"></span>
                        </td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300" x-text="new Date(d.Created * 1000).toLocaleDateString()"></td>
                        <td class="px-6 py-4 text-sm text-gray-500 dark:text-gray-300" x-text="formatBytes(d.Size)"></td>
                        <td class="px-6 py-4 text-sm">
                            <button @click="confirm('Are you sure you want to delete this image?') && Action('ImageRemove', d.Id)"
                                    class="text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 transition-colors"
                                    title="Delete">
                                <i class="ri-delete-bin-line w-5 h-5"></i>
                            </button>
                        </td>
                    </tr>
                </template>
            </tbody>
        </table>
        
        <div x-show="!data?.images || data.images.length === 0" class="px-6 py-8 text-center text-gray-500 dark:text-gray-400">
            <i class="ri-image-2-line w-12 h-12 mx-auto mb-3 text-gray-300 dark:text-gray-600"></i>
            <p class="text-sm">No images found</p>
        </div>
    </div>
</div>

<!-- Docker Run Modal -->
<div x-show="dockerRunModal" class="fixed inset-0 z-50 overflow-y-auto" x-cloak>
    <div class="flex items-center justify-center min-h-screen px-4 pt-4 pb-20 text-center sm:block sm:p-0">
        <div class="fixed inset-0 transition-opacity bg-gray-500 bg-opacity-75" @click="dockerRunModal=false"></div>
        
        <div class="inline-block w-full max-w-2xl p-6 my-8 overflow-hidden text-left align-middle transition-all transform bg-white dark:bg-gray-800 shadow-xl rounded-lg">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-medium text-gray-900 dark:text-white">Docker Run Command</h3>
                <button @click="dockerRunModal=false" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
                    <i class="ri-close-line w-6 h-6"></i>
                </button>
            </div>
            
            <textarea rows="10"
                      class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:ring-2 focus:ring-primary focus:border-transparent font-mono text-sm"
                      placeholder="docker run -d --name my-container nginx:latest"></textarea>
            
            <div class="flex justify-end mt-4 space-x-3">
                <button @click="dockerRunModal=false"
                        class="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-600 hover:bg-gray-200 dark:hover:bg-gray-500 rounded-lg transition-colors">
                    Cancel
                </button>
                <button class="px-4 py-2 bg-primary hover:bg-purple-700 text-white rounded-lg transition-colors">
                    Run
                </button>
            </div>
        </div>
    </div>
</div>

<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('panel', () => ({
            data: null,
            dockerRunModal: false,
            
            init() {
                const eventSource = new EventSource('/admin/docker?type=info');
                eventSource.onmessage = (event) => {
                    try {
                        this.data = JSON.parse(event.data);
                    } catch (e) {
                        console.error("Error parsing Docker data:", e);
                    }
                };
                eventSource.onerror = (error) => {
                    console.error("EventSource error:", error);
                    eventSource.close();
                };
            },
            
            async Action(action, id) {
                try {
                    const response = await fetch(`/admin/docker?type=${action}&id=${id}`, {
                        method: 'PUT'
                    });
                    if (response.ok) {
                        // Silent update, data will refresh via SSE
                    } else {
                        alert(await response.text());
                    }
                } catch (error) {
                    alert('Action failed: ' + error.message);
                }
            },
            
            formatBytes(bytes, decimals = 2) {
                if (bytes === 0) return '0 B';
                const k = 1024;
                const dm = decimals < 0 ? 0 : decimals;
                const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
            },
            
            timeAgo(timestamp) {
                const now = new Date();
                const past = new Date(timestamp * 1000);
                const diffInSeconds = Math.floor((now - past) / 1000);
                
                if (diffInSeconds < 60) {
                    return `${diffInSeconds} seconds ago`;
                } else if (diffInSeconds < 3600) {
                    const minutes = Math.floor(diffInSeconds / 60);
                    return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
                } else if (diffInSeconds < 86400) {
                    const hours = Math.floor(diffInSeconds / 3600);
                    return `${hours} hour${hours > 1 ? 's' : ''} ago`;
                } else {
                    const days = Math.floor(diffInSeconds / 86400);
                    return `${days} day${days > 1 ? 's' : ''} ago`;
                }
            }
        }))
    })
</script>
{{template "footer.template"}}