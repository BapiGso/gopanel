{{template "header.template"}}
<section>
    <h3>Docker Manage</h3>
    <p>1. This function calls the docker API installed on the system.</p>
    <p>2. For more complex management, use <a href="https://www.docker.com/products/docker-desktop/">docker desktop</a></p>
    <p>
        <button x-show="false" @click="dockerRunModal=true">Docker Run</button>
    </p>
    <table>
        <thead>
        <tr><th colspan="6">ContainerList</th></tr>
        <tr>
            <th hidden>ID</th>
            <th>name</th>
            <th>image</th>
            <th>status</th>
            <th>port(s)</th>
            <th>created</th>
            <th>actions</th>
        </tr>
        </thead>
        <tbody>
        <template x-for="d in data?.containers">
            <tr>
                <td hidden x-text="d.Id"></td>
                <td x-text="d.Names"></td>
                <td><a :href="d.Image" x-text="d.Image"></a></td>
                <td x-text="d.State"></td>
                <td>
                    <template x-for="port in d.Ports">
                        <a data-tooltip="Click to visit, but not necessarily an http service" :href="`http://${port.IP}:${port.PublicPort}`" x-text="`${port.PublicPort}:${port.PrivatePort}`"></a><br>
                    </template>
                </td>
                <td  x-text="timeAgo(d.Created)"></td>
                <td>
                    <a x-show="d.State !== 'running'" @click="Action('unpause', d.Id)">‚ñ∂Ô∏è</a>
                    <a x-show="d.State !== 'paused'"  @click="Action('pause', d.Id)"  >‚è∏Ô∏è</a>
                    <a x-show="d.State !== 'exited'"  @click="Action('stop', d.Id)"   >‚èπÔ∏è</a>
                    <a @click="Action('restart', d.Id)">üîÑ</a>
                    <a @click="confirm('sure to delete?') && Action('remove', d.Id)">üöÆ</a>
                </td>
            </tr>
        </template>
    </table>
    <table>
        <thead>
        <tr><th colspan="6">ImageList</th></tr>
        <tr>
            <th hidden>ID</th>
            <th>name</th>
            <th>tag</th>
            <th>created</th>
            <th>size</th>
            <th>actions</th>
        </tr>
        </thead>
        <tbody>
        <template x-for="d in data?.images">
            <tr>
                <td hidden x-text="d.Id"></td>
                <td x-text="d.RepoTags[0].split(':')[0]"></td>
                <td x-text="d.RepoTags[0].split(':')[1]"></td>
                <td x-text="new Date(d.Created * 1000).toLocaleDateString()"></td>
                <td x-text="formatBytes(d.Size)"></td>
                <td>
                    <a @click="confirm('sure to delete?') && Action('ImageRemove', d.Id)">üöÆ</a>
                </td>
            </tr>
        </template>
    </table>
</section>

<dialog :open="dockerRunModal">
    <article>
        <h2>Type Your Docker Run Command</h2>
        <textarea rows="15" aria-label="Docker Run"></textarea>
        <footer>
            <button>Run</button>
        </footer>
    </article>
</dialog>
<script>
    document.addEventListener('alpine:init', () => {
        Alpine.data('panel', () => ({
            init(){
                const eventSource = new EventSource('/admin/docker?type=info');
                eventSource.onmessage=(event) => {
                    this.data=JSON.parse(event.data);
                };
                eventSource.onerror=(event) => {
                    console.log(event)
                }
            },
            data:null,
            dockerRunModal:false,
            async Action(action, id) {
                let response = await fetch(`/admin/docker?type=${action}&id=${id}`, {method: 'PUT'});
                if (response.ok) {
                    alert(`${action} successful`);
                } else {
                    alert(await response.text());
                }
            },
            formatBytes(bytes, decimals = 2) {
                if (bytes === '0') return '0';
                const k = 1024;
                const dm = decimals < 0 ? 0 : decimals;
                const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
            },
            timeAgo(timestamp){
            const now = new Date();
            const past = new Date(timestamp * 1000);
            const diffInSeconds = Math.floor((now - past) / 1000);

            if (diffInSeconds < 60) {
                return `${diffInSeconds} seconds ago`;
            } else if (diffInSeconds < 3600) {
                const minutes = Math.floor(diffInSeconds / 60);
                return `${minutes} minute${minutes > 1 ? 's' : ''} ago`;
            } else if (diffInSeconds < 86400) {
                const hours = Math.floor(diffInSeconds / 3600);
                return `${hours} hour${hours > 1 ? 's' : ''} ago`;
            } else {
                const days = Math.floor(diffInSeconds / 86400);
                return `${days} day${days > 1 ? 's' : ''} ago`;
            }
        }

    }))
    })
</script>